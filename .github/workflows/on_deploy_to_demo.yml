############################################################
# Proxy workflow that orchestrate platform specific actions
############################################################

name: "DEMO - Deploy service"

on:
    workflow_dispatch:
        inputs:
            source_branch:
                description: "Source: branch/tag/SHA:"
                required: true
            perform_tests:
                description: "Tests: unit & sonar:"
                required: false
                default: "true"
            perform_build:
                description: "Build: new ECR image:"
                required: false
                default: "true"
            image_prefix:
                description: "Build: image prefix (ex: 'RC-' = 'RC-X.Y.Z'):"
                required: false
                default: "RELEASE-"
            perform_deployment:
                description: "Deploy: ECS (dry-run = false):"
                required: false
                default: "true"
            deploy_tag:
                description: "Deploy: tag (empty = current app version)"
                required: false
                default: ""
    # Continuous delivery activated for demo
    push:
        branches:
            - master

env:
    ENV_NAME: "demo"
    SOURCE_BRANCH: ${{ github.event.inputs.source_branch }}
    IMAGE_PREFIX: "RELEASE-"
    PERFORM_BUILD: "true"
    PERFORM_DEPLOYMENT: "true"
    DEPLOY_TAG: ""
    PERFORM_TESTS: "true"

jobs:
    # This pre-job allows to save minutes (and by so, money) in case of duplicated runs
    pre_job:
        environment: demo
        continue-on-error: true
        runs-on: ubuntu-latest
        name: "Cancel previous branch jobs"
        timeout-minutes: 5
        steps:
            - name: "Cancel duplicate runs"
              id: skip_check
              uses: fkirc/skip-duplicate-actions@master
              with:
                  cancel_others: true
                  concurrent_skipping: "always"
                  github_token: ${{ secrets.ACTIONS_ACCESS_TOKEN  }}

    deploy_job:
        environment: demo
        runs-on: ubuntu-latest
        name: "Deploy branch to demo"
        timeout-minutes: 30
        steps:
            - name: "Checkout using source_branch"
              if: ${{ github.event.inputs.source_branch }}
              uses: actions/checkout@v2
              with:
                  ref: ${{ github.event.inputs.source_branch }}
                  token: ${{ secrets.ACTIONS_ACCESS_TOKEN  }}

            - name: "Checkout branch that triggered the run"
              if: ${{ !github.event.inputs.source_branch }}
              uses: actions/checkout@v2
              with:
                  ref: ${{ env.GITHUB_REF_NAME }}
                  token: ${{ secrets.ACTIONS_ACCESS_TOKEN  }}

            # Defines runtime variables depending on context
            - name: "Init job env from inputs"
              id: init_wrapper_env
              uses: ./.github/actions/wrapper-init-env
              with:
                  source_branch: "${{ env.SOURCE_BRANCH }}"
                  perform_build: "${{ env.PERFORM_BUILD }}"
                  image_prefix: "${{ env.IMAGE_PREFIX }}"
                  perform_deployment: "${{ env.PERFORM_DEPLOYMENT }}"
                  perform_tests: "${{ env.PERFORM_TESTS }}"

            - name: "Deployment settings"
              run: |
                  echo "Will use source_branch=${{ steps.init_wrapper_env.outputs.source_branch }}"
                  echo "Will use perform_build=${{ steps.init_wrapper_env.outputs.perform_build }}"
                  echo "Will use image_prefix=${{ steps.init_wrapper_env.outputs.image_prefix }}"
                  echo "Will use perform_deployment=${{ steps.init_wrapper_env.outputs.perform_deployment }}"
                  echo "Will use perform_tests=${{ steps.init_wrapper_env.outputs.perform_tests }}"
              shell: bash

            - name: "Build Docker image"
              uses: ./.github/actions/build_java
              with:
                  token: ${{ secrets.ACTIONS_ACCESS_TOKEN }}
                  registry_name: ${{ secrets.REGISTRY_NAME }}
                  mvn_profile: ${{ secrets.MVN_PROFILE }}
                  ecr_aws_region: ${{ secrets.AWS_REGION }}
                  ecr_aws_access_key_id: ${{ secrets.AWS_ECS_SERVICE_DEPLOYER_ACCESS_KEY_ID }}
                  ecr_aws_secret_access_key: ${{ secrets.AWS_ECS_SERVICE_DEPLOYER_SECRET_ACCESS_KEY }}
                  image_prefix: ${{ steps.init_wrapper_env.outputs.IMAGE_PREFIX }}
                  terraform_identifier: ${{ secrets.TERRAFORM_IDENTIFIER }}
                  perform_build: "${{ steps.init_wrapper_env.outputs.perform_build }}"
                  perform_deployment: "${{ steps.init_wrapper_env.outputs.perform_deployment }}"
                  image_tag: ${{ inputs.deploy_tag }}
                  service: ${{ secrets.SERVICE }}
                  cluster: ${{ secrets.CLUSTER }}
                  gist_badge_token: ${{ secrets.GIST_BADGE }}
                  gist_badge_id: ${{ secrets.GIST_ID }}
                  gist_badge_filename: ${{ secrets.GIST_FILENAME }}

    test_job:
        environment: demo
        runs-on: ubuntu-latest
        name: "Test branch"
        timeout-minutes: 30
        steps:
            - name: "Checkout using source_branch"
              if: ${{ github.event.inputs.source_branch }}
              uses: actions/checkout@v2
              with:
                  ref: ${{ github.event.inputs.source_branch }}
                  token: ${{ secrets.ACTIONS_ACCESS_TOKEN  }}

            - name: "Checkout branch that triggered the run"
              if: ${{ !github.event.inputs.source_branch }}
              uses: actions/checkout@v2
              with:
                  ref: ${{ env.GITHUB_REF_NAME }}
                  token: ${{ secrets.ACTIONS_ACCESS_TOKEN  }}

            # Defines runtime variables depending on context
            - name: "Init job env from inputs"
              id: test_init_wrapper_env
              uses: ./.github/actions/wrapper-init-env
              with:
                  perform_tests: "${{ env.PERFORM_TESTS }}"

            - name: "Tests settings"
              run: |
                  echo "Will use perform_tests=${{ steps.test_init_wrapper_env.outputs.perform_tests }}"
              shell: bash

            - name: "Tests"
              if: ${{ fromJSON(steps.test_init_wrapper_env.outputs.perform_tests ) }}
              uses: ./.github/actions/test_java
              with:
                  token: ${{ secrets.ACTIONS_ACCESS_TOKEN }}
                  ecr_aws_region: ${{ secrets.AWS_REGION }}
                  ecr_aws_access_key_id: ${{ secrets.AWS_ECS_SERVICE_DEPLOYER_ACCESS_KEY_ID }}
                  ecr_aws_secret_access_key: ${{ secrets.AWS_ECS_SERVICE_DEPLOYER_SECRET_ACCESS_KEY }}
                  sonar_token: ${{ secrets.SONAR_TOKEN }}
