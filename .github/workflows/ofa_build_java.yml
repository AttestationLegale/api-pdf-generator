############################################################
#
#   WARNING: This repository has a specific CI/CD pipeline
#   due to its OpenSource status
#
############################################################

############################################################
# Agnostic workflow (usually triggered by others)
# Runs Java applications build and deploy for any branch/env
############################################################

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
name: "GENERIC - Deploy service"

on:
    workflow_dispatch:
        # Inputs the workflow accepts.
        inputs:
            repository_branch:
                description: "Branch/tag/SHA to build:"
                required: true
                default: "dev"
            ofa_environment:
                description: "Defines the env configuration (integration, staging, demo, production):"
                required: true
                default: "integration"
            perform_build:
                description: "Publish a new ECR image:"
                required: true
                default: "false"
            perform_deployment:
                description: "Enable or disable deployment to AWS:"
                required: true
                default: "false"
            image_prefix:
                description: "Target image prefix on ECR (ex: 'RC-' = 'RC-X.Y.Z'):"
                required: false
                default: "GENERIC-"

env:
    # Application configuration
    REPO_BRANCH: ${{ github.event.inputs.repository_branch }}
    OFA_ENV: ${{ github.event.inputs.ofa_environment }}
    ENV_NAME: ${{ github.event.inputs.ofa_environment }}
    PERFORM_BUILD: ${{ github.event.inputs.perform_build }}
    PERFORM_DEPLOY: ${{ github.event.inputs.perform_deployment }}
    IMAGE_PREFIX: ${{ github.event.inputs.image_prefix }}

jobs:
    # This pre-job allows to save minutes (and by so, money) in case of duplicated runs
    pre_job:
        environment: ${{ github.event.inputs.ofa_environment }}
        continue-on-error: true
        runs-on: ubuntu-latest
        name: "Cancel previous branch jobs"
        timeout-minutes: 5
        steps:
            - name: "Cancel duplicate runs"
              id: skip_check
              uses: fkirc/skip-duplicate-actions@master
              with:
                  cancel_others: true
                  concurrent_skipping: "always"
                  github_token: ${{ secrets.ACTIONS_ACCESS_TOKEN  }}

    ofa_build_image_job:
        environment: ${{ github.event.inputs.ofa_environment }}
        runs-on: ubuntu-latest
        name: "Build Docker image"
        timeout-minutes: 30
        steps:
            # To use this repository's private action, you must check out the repository
            - name: "Checkout"
              id: checkout
              uses: actions/checkout@v2
              with:
                  ref: ${{ env.REPO_BRANCH }}
                  token: ${{ secrets.ACTIONS_ACCESS_TOKEN  }}

            # Provides useful common env vars (like repository name)
            - name: "Init common env vars"
              uses: FranzDiebold/github-env-vars-action@v2.3.0

            - name: "Init application runtime env vars"
              id: init_env
              run: |
                  echo "This step might take some time depending on what is in cache... please be patient"

                  # Extract project version (ignoring <parent> bloc)
                  # Unix method preferred over mvn command, because mvn would download dependencies ($$: ~2 minutes)
                  export VERSION=$(
                    awk '
                      /<dependenc/{exit}
                      /<parent>/{parent++};
                      /<version>/{
                        if (parent == 1) {
                          sub(/.*<version>/, "");
                          sub(/<.*/, "");
                          parent_version = $0;
                        } else {
                          sub(/.*<version>/, "");
                          sub(/<.*/, "");
                          version = $0;
                          exit
                        }
                      }
                      /<\/parent>/{parent--};
                      END {
                        print (version == "") ? parent_version : version
                      }' pom.xml
                    )
                  echo "APP_VERSION=$(echo ${VERSION})" >> $GITHUB_ENV
                  echo "Exported APP_VERSION:[${VERSION}]"

              shell: bash

            # Needed to access ECR during build
            - name: "Configure AWS credentials"
              id: aws_creds_dev_deployer
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ECS_SERVICE_DEPLOYER_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_ECS_SERVICE_DEPLOYER_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: "Login to Amazon ECR"
              id: login_ecr_dev_deployer
              uses: aws-actions/amazon-ecr-login@v1

            # Cache initialization
            - name: "Set up Docker Buildx"
              id: init_buildx
              if: ${{ env.PERFORM_BUILD == 'true' }}
              uses: docker/setup-buildx-action@v1
              with:
                  driver-opts: image=moby/buildkit:master

            - name: "Cache Docker layers"
              id: cache_docker
              if: ${{ env.PERFORM_BUILD == 'true' }}
              uses: actions/cache@v2
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-

            - name: "Push to ECR"
              id: docker_push
              if: ${{ env.PERFORM_BUILD == 'true' }}
              uses: docker/build-push-action@v2
              with:
                  push: true
                  context: .
                  file: Dockerfile
                  build-args: |
                      APP_HOME=./
                      DD_SERVICE=${{ secrets.REGISTRY_NAME }}
                      DD_VERSION=${{ env.APP_VERSION }}
                      MVN_PROFILE=${{ secrets.MVN_PROFILE }}
                  platforms: linux/amd64
                  # Requires full tag to push to AWS
                  tags: |
                      ${{ steps.login_ecr_dev_deployer.outputs.registry }}/${{ secrets.REGISTRY_NAME }}:${{ env.APP_VERSION }}
                      ${{ steps.login_ecr_dev_deployer.outputs.registry }}/${{ secrets.REGISTRY_NAME }}:${{ env.IMAGE_PREFIX }}${{ env.APP_VERSION }}
                      ${{ steps.login_ecr_dev_deployer.outputs.registry }}/${{ secrets.REGISTRY_NAME }}:${{ secrets.TERRAFORM_IDENTIFIER }}
                      ${{ steps.login_ecr_dev_deployer.outputs.registry }}/${{ secrets.REGISTRY_NAME }}:latest
                      ${{ steps.login_ecr_dev_deployer.outputs.registry }}/${{ secrets.REGISTRY_NAME }}:github-${{ env.CI_SHA_SHORT }}
                  cache-from: type=local,src=/tmp/.buildx-cache
                  cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

            #   # This ugly bit is necessary if you don't want your cache to grow forever
            #   # till it hits GitHub's limit of 5GB.
            #   # Temp fix
            #   # https://github.com/docker/build-push-action/issues/252
            #   # https://github.com/moby/buildkit/issues/1896
            - name: "Move cache"
              run: |
                  rm -rf /tmp/.buildx-cache
                  mv /tmp/.buildx-cache-new /tmp/.buildx-cache

            - name: "Deploy to ECS"
              id: aws_task_deployment
              # Travis ignored error on ecs-deploy like the $TIMEOUT
              # that can trigger a false positive exit 1 at line 430
              continue-on-error: true
              if: ${{ env.PERFORM_DEPLOY == 'true' }}
              run: |
                  curl https://raw.githubusercontent.com/AttestationLegale/ecs-deploy/master/ecs-deploy > ./ecs-deploy
                  chmod +x ecs-deploy
                  ./ecs-deploy \
                      -n ${{ secrets.SERVICE }} \
                      -c ${{ secrets.CLUSTER }} \
                      -i ${{ steps.login_ecr_dev_deployer.outputs.registry }}/${{ secrets.REGISTRY_NAME }}:${{ env.IMAGE_PREFIX }}${{ env.APP_VERSION }} \
                      -r ${{ secrets.AWS_REGION }} \
                      -k ${{ secrets.AWS_ECS_SERVICE_DEPLOYER_ACCESS_KEY_ID }} \
                      -s ${{ secrets.AWS_ECS_SERVICE_DEPLOYER_SECRET_ACCESS_KEY }} \
                      -t 31 \
                      --skip-deployments-check
              shell: bash

            - name: "Set current date as env variable"
              id: current_date
              if: ${{ env.PERFORM_DEPLOY == 'true' }}
              run: echo "NOW=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

            - name: "Create deployment badge"
              uses: schneegans/dynamic-badges-action@v1.0.0
              if: ${{ env.PERFORM_DEPLOY == 'true' }}
              # Not failing workflow for a badge
              continue-on-error: true
              with:
                  auth: ${{ secrets.GIST_BADGE }}
                  gistID: ${{ secrets.GIST_ID }}
                  filename: ${{ secrets.GIST_FILENAME }}
                  namedLogo: "amazon"
                  label: "${{ env.ENV_NAME }} - ref:[${{ env.REPO_BRANCH }}] - ${{ env.NOW }}"
                  message: ${{ env.APP_VERSION }}
                  color: green

            - name: Logout of Amazon ECR
              if: always()
              run: docker logout ${{ steps.login_ecr_dev_deployer.outputs.registry }}
