############################################################
#
#   WARNING: This repository has a specific CI/CD pipeline
#   due to its OpenSource status
#
############################################################

############################################################
# IMPORTANT: this job is referenced in OFA delivery tools
# @see https://github.com/AttestationLegale/ofa_platform-resources
############################################################

name: "PROD - Deploy service"

on:
    workflow_dispatch:
        # Inputs the workflow accepts.
        inputs:
            source_branch:
                description: "Source branch/tag/SHA to deploy to PRODUCTION:"
                required: true
                default: "master"
            perform_build:
                description: "Publish a new ECR image:"
                required: true
                default: "true"
            perform_deployment:
                description: "Perform ECS deployment (dry-run = false):"
                required: true
                default: "false"
            image_prefix:
                description: "Tag an image with a prefix (ex: 'RC-' = 'RC-X.Y.Z'):"
                required: false
                default: "RELEASE-"
    # Continuous delivery deactivated for now (team decision)
    # push:
    #     branches:
    #         - master

env:
    ENV_NAME: "production"
    # Defaults if no inputs to override those values
    SOURCE_BRANCH_DEFAULT: ${{ github.event.inputs.source_branch }}
    IMAGE_PREFIX_DEFAULT: "RELEASE-"
    PERFORM_BUILD_DEFAULT: "false"
    PERFORM_DEPLOYMENT_DEFAULT: "false"

jobs:
    # This pre-job allows to save minutes (and by so, money) in case of duplicated runs
    pre_job:
        continue-on-error: true
        runs-on: ubuntu-latest
        name: "Cancel previous branch jobs"
        timeout-minutes: 5
        steps:
            -   name: "Cancel duplicate runs"
                id: skip_check
                uses: fkirc/skip-duplicate-actions@master
                with:
                    cancel_others: true
                    concurrent_skipping: "always"
                    github_token: ${{ secrets.ACTIONS_ACCESS_TOKEN  }}

    # Defines runtime variables depending on context
    init_env_job:
        runs-on: ubuntu-latest
        name: "Init env from context"
        timeout-minutes: 5
        steps:
            # Provides useful common env vars (like repository name)
            -   name: "Init common env vars"
                uses: FranzDiebold/github-env-vars-action@v2.3.0

            # To use this repository's private action, you must check out the repository
            -   name: "Checkout"
                id: checkout
                uses: actions/checkout@v2
                with:
                    ref: ${{ env.CI_REF }}
                    token: ${{ secrets.ACTIONS_ACCESS_TOKEN  }}

            # Defines runtime variables depending on context
            -   name: "Init job env from inputs"
                id: init_wrapper_env
                uses: ./.github/actions/wrapper-init-env
                with:
                    source_branch: "${{ env.SOURCE_BRANCH_DEFAULT }}"
                    perform_build: "${{ env.PERFORM_BUILD_DEFAULT }}"
                    image_prefix: "${{ env.IMAGE_PREFIX_DEFAULT }}"
                    perform_deployment: "${{ env.PERFORM_DEPLOYMENT_DEFAULT }}"

            - name: "Deployment settings"
              run: |
                echo "Will use source_branch=${{ steps.init_wrapper_env.outputs.source_branch }}"
                echo "Will use perform_build=${{ steps.init_wrapper_env.outputs.perform_build }}"
                echo "Will use image_prefix=${{ steps.init_wrapper_env.outputs.image_prefix }}"
                echo "Will use perform_deployment=${{ steps.init_wrapper_env.outputs.perform_deployment }}"
              shell: bash
        outputs:
          SOURCE_BRANCH: ${{ steps.init_wrapper_env.outputs.source_branch }}
          IMAGE_PREFIX: ${{ steps.init_wrapper_env.outputs.image_prefix }}
          PERFORM_BUILD: ${{ steps.init_wrapper_env.outputs.perform_build }}
          PERFORM_DEPLOYMENT: ${{ steps.init_wrapper_env.outputs.perform_deployment }}

    on_deploy_to_production_test_workflow:
        needs: init_env_job
        runs-on: ubuntu-latest
        name: "Test production branch"
        timeout-minutes: 5
        steps:
            # Provides useful common env vars (like repository name)
            -   name: "Init common env vars"
                uses: FranzDiebold/github-env-vars-action@v2.3.0

            -   name: "Trigger tests of production branch"
                uses: convictional/trigger-workflow-and-wait@v1.5.0
                with:
                    owner: ${{ env.CI_REPOSITORY_OWNER }}
                    repo: ${{ env.CI_REPOSITORY_NAME }}
                    github_token: ${{ secrets.ACTIONS_ACCESS_TOKEN }}
                    workflow_file_name: ofa_test_java.yml
                    ref: ${{needs.init_env_job.outputs.SOURCE_BRANCH}}
                    inputs: '{
                        "repository_branch": "${{needs.init_env_job.outputs.SOURCE_BRANCH}}",
                        "ofa_environment": "${{ env.ENV_NAME }}"
                    }'
                    propagate_failure: true
                    trigger_workflow: true
                    wait_workflow: false



    on_deploy_to_production_workflow:
        needs: init_env_job
        runs-on: ubuntu-latest
        name: "Deploy production branch"
        timeout-minutes: 5
        steps:
            # Provides useful common env vars (like repository name)
            -   name: "Init common env vars"
                uses: FranzDiebold/github-env-vars-action@v2.3.0

            -   name: "Trigger deployment to production"
                uses: convictional/trigger-workflow-and-wait@v1.5.0
                with:
                    owner: ${{ env.CI_REPOSITORY_OWNER }}
                    repo: ${{ env.CI_REPOSITORY_NAME }}
                    github_token: ${{ secrets.ACTIONS_ACCESS_TOKEN }}
                    workflow_file_name: ofa_build_java.yml
                    ref: ${{needs.init_env_job.outputs.SOURCE_BRANCH}}
                    inputs: '{
                        "repository_branch": "${{needs.init_env_job.outputs.SOURCE_BRANCH}}",
                        "ofa_environment": "${{ env.ENV_NAME }}",
                        "perform_build": "${{needs.init_env_job.outputs.PERFORM_BUILD}}",
                        "perform_deployment": "${{needs.init_env_job.outputs.PERFORM_DEPLOYMENT}}",
                        "image_prefix": "${{needs.init_env_job.outputs.IMAGE_PREFIX}}"
                    }'
                    propagate_failure: true
                    trigger_workflow: true
                    wait_workflow: false

