dist: xenial

services:
  - docker
language: java
jdk:
  - openjdk8

cache:
  pip: true
  directories:
    - $HOME/.m2
    - $HOME/.sonar/cache
    - ".git-crypt/tmp/"
    - $HOME/.cache/pip
    - $HOME/.local
env:
  global:
    - MAVEN_OPTS="-Xmx1G -Xms1G"
    - SPRING_OUTPUT_ANSI_ENABLED=ALWAYS
    - SPRING_JPA_SHOW_SQL=false
    - COMMIT=${TRAVIS_COMMIT::8}
    - IMAGE_NAME=api-pdf-generator
    - SERVICE_PERF=com-ofa-perf-api-pdf-generator
    - SERVICE_STG=com-ofa-stg-api-pdf-generator
    - SERVICE_PROD=com-ofa-prod-api-pdf-generator
    - SERVICE_DEMO=com-ofa-demo-api-pdf-generator
    - CLUSTER_PERF=com-ofa-perf-ecs-cluster
    - CLUSTER_STG=com-ofa-stg-ecs-cluster
    - CLUSTER_DEMO=com-ofa-demo-ecs-cluster

stages:
  - precache # create cache for all stages; to enable only if next stages have several jobs to be executed in parallel
  - name: test-and-deploy-int # execute test and deploy INT environment
    if: NOT branch IN (PLATINT-4908, stg, master) AND tag IS blank
  - name: test-and-deploy-perf
    if: branch = PLATINT-4908 AND tag IS blank
  - name: deploy-stg
    if: branch = stg AND tag IS blank
  - name: deploy-prod
    if: type != pull_request AND branch = master AND tag IS blank
  - name: deploy-demo
    if: type != pull_request AND branch = master AND tag IS blank

jobs:
  include:
  ## Install all dependencies and needed extra packages and set the cache. It will be reused by next stages.
  - stage: precache
    name: "Create cache"
    install:
      - pip show awscli || pip install --user awscli # install aws cli w/o sudo only if necessary
      - export AWSCLI_PATH=$(pip show awscli | grep Location | awk -F " " '{print $2}')
      - export PATH=$PATH:$AWSCLI_PATH
      - if [ ! -f  /usr/local/bin/git-crypt ]; then curl -L https://github.com/minrk/git-crypt-bin/releases/download/0.6.0/git-crypt > git-crypt; fi
      - if [ ! -f  /usr/local/bin/git-crypt ]; then echo "128817a63de17a5af03fe69241e453436c6c286c86dd37fb70ed9b3bf7171d7d  git-crypt" | shasum -a 256 -c -; fi
      - if [ ! -f  /usr/local/bin/git-crypt ]; then chmod +x git-crypt; fi
      - if [ ! -f  /usr/local/bin/git-crypt ]; then sudo cp git-crypt /usr/local/bin/; fi
      - curl https://raw.githubusercontent.com/AttestationLegale/ecs-deploy/master/service-deploy.sh > service-deploy.sh
      - chmod +x service-deploy.sh
      - ./mvnw package -DskipTests=true -Dmaven.javadoc.skip=true -B -V # Downloading dependencies
    before_script: true
    script: true

  ## Executes maven and sonar tests for dev and feature branch only
  - stage: test-and-deploy-int
    name: "Execute tests and deploy to INT"
    install: ## If precache stage is prefered, clean "install" and set it to "skip"
      - pip show awscli || pip install --user awscli # install aws cli w/o sudo only if necessary
      - export AWSCLI_PATH=$(pip show awscli | grep Location | awk -F " " '{print $2}')
      - export PATH=$PATH:$AWSCLI_PATH
      - if [ ! -f  /usr/local/bin/git-crypt ]; then curl -L https://github.com/minrk/git-crypt-bin/releases/download/0.6.0/git-crypt > git-crypt; fi
      - if [ ! -f  /usr/local/bin/git-crypt ]; then echo "128817a63de17a5af03fe69241e453436c6c286c86dd37fb70ed9b3bf7171d7d  git-crypt" | shasum -a 256 -c -; fi
      - if [ ! -f  /usr/local/bin/git-crypt ]; then chmod +x git-crypt; fi
      - if [ ! -f  /usr/local/bin/git-crypt ]; then sudo cp git-crypt /usr/local/bin/; fi
    script:
      - ./mvnw clean test
      ## TODO: implement performance, load and security tests specific to this service
      # - ./service-performance-test.sh
      # - ./service-load-test.sh
      # - ./service-security-test.sh
      - if [[ $TRAVIS_PULL_REQUEST != 'false' ]]; then ./mvnw sonar:sonar -Dsonar.login=$SONAR_LOGIN -Dsonar.password=$SONAR_PASSWORD -Dsonar.github.oauth=$GITHUB_TOKEN -Dsonar.github.repository=$TRAVIS_REPO_SLUG -Dsonar.github.pullRequest=$TRAVIS_PULL_REQUEST -Dsonar.analysis.mode=preview; elif [[ $TRAVIS_BRANCH == 'dev' ]]; then ./mvnw sonar:sonar -Dsonar.login=$SONAR_LOGIN -Dsonar.password=$SONAR_PASSWORD ; fi
      - ./mvnw package -Pstg -DskipTests
      - docker build -t $IMAGE_NAME:$COMMIT .
    before_deploy:
      - export VERSION=`mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec`
      - curl https://raw.githubusercontent.com/AttestationLegale/ecs-deploy/master/service-deploy.sh > service-deploy.sh
      - chmod +x service-deploy.sh
    deploy:
      - provider: script
        skip_cleanup: true
        script: ./service-deploy.sh $VERSION-$TRAVIS_BRANCH $REGISTRY_DEV_URL $SERVICE_DEV $CLUSTER_DEV $AWS_ECS_DEV_DEPLOYER_ACCESS_KEY_ID $AWS_ECS_DEV_DEPLOYER_SECRET_ACCESS_KEY
        on:
          branch: dev
          condition: type != pull_request
    # after_deploy: # Will be executed once deployment is done and successful. If any of those tests fail, travis build will fail and rollback will be executed
    # TODO: mvn verify might be leveraged for post deployment tests
    #   - "./performance-tests || (./rollbackService.sh;travis_terminate 1);"
    #   - "./security-tests || (./rollbackService.sh;travis_terminate 1);"
    #   - "./sit || (./rollbackService.sh;travis_terminate 1);"

  ## This job is not used for now. Uncomment if needed
  # - stage: test-and-deploy-int
  #   name: "Displays dependencies versions"
  #   if: type != pull_request AND branch = dev
  #   install: skip
  #   script: ./mvnw versions:display-dependency-updates -DprocessDependencyManagement=false

  - stage: test-and-deploy-perf
    name: "Execute tests and deploy to PERF"
    install:
      - pip show awscli || pip install --user awscli
      - export AWSCLI_PATH=$(pip show awscli | grep Location | awk -F " " '{print $2}')
      - export PATH=$PATH:$AWSCLI_PATH
      - if [ ! -f  /usr/local/bin/git-crypt ]; then curl -L https://github.com/minrk/git-crypt-bin/releases/download/0.6.0/git-crypt > git-crypt; fi
      - if [ ! -f  /usr/local/bin/git-crypt ]; then echo "128817a63de17a5af03fe69241e453436c6c286c86dd37fb70ed9b3bf7171d7d  git-crypt" | shasum -a 256 -c -; fi
      - if [ ! -f  /usr/local/bin/git-crypt ]; then chmod +x git-crypt; fi
      - if [ ! -f  /usr/local/bin/git-crypt ]; then sudo cp git-crypt /usr/local/bin/; fi
    script:
      - ./mvnw clean verify -Pstg -Dcucumber.options="--plugin progress"
      - docker build -t $IMAGE_NAME:$COMMIT .
    before_deploy:
      - export VERSION=`mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec`
      - curl https://raw.githubusercontent.com/AttestationLegale/ecs-deploy/master/service-deploy.sh > service-deploy.sh
      - chmod +x service-deploy.sh
    deploy:
      - provider: script
        skip_cleanup: true
        script: ./service-deploy.sh $VERSION-$TRAVIS_BRANCH $REGISTRY_DEV_URL $SERVICE_PERF $CLUSTER_PERF $AWS_ECS_DEV_DEPLOYER_ACCESS_KEY_ID $AWS_ECS_DEV_DEPLOYER_SECRET_ACCESS_KEY
        on:
          branch: PLATINT-4908
          condition: type != pull_request

  - stage: deploy-stg
    name: "Execute performance, security and system integration tests for the PR"
    if: type = pull_request AND branch = stg
    install: skip
    script: true # TODO: remove "true" once below tests are implemented
      # - ./performance-tests.sh
      # - ./security-tests.sh
      # - ./sit.sh
  - stage: deploy-stg
    name: "Deploy to STG"
    if: type != pull_request AND branch = stg
    install:
      - pip show awscli || pip install --user awscli # install aws cli w/o sudo only if necessary
      - export AWSCLI_PATH=$(pip show awscli | grep Location | awk -F " " '{print $2}')
      - export PATH=$PATH:$AWSCLI_PATH
    script:
      - ./mvnw package -Pstg -DskipTests
      - docker build -t $IMAGE_NAME:$COMMIT .
    before_deploy:
      - export VERSION=`mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec`
      - curl https://raw.githubusercontent.com/AttestationLegale/ecs-deploy/master/service-deploy.sh > service-deploy.sh
      - chmod +x service-deploy.sh
    deploy:
      - provider: script
        skip_cleanup: true
        script: ./service-deploy.sh $VERSION-RC $REGISTRY_DEV_URL $SERVICE_STG $CLUSTER_STG $AWS_ECS_DEV_DEPLOYER_ACCESS_KEY_ID $AWS_ECS_DEV_DEPLOYER_SECRET_ACCESS_KEY
        on:
          branch: stg
    # after_deploy: # Will be executed once deployment is done and successful. If any of those tests fail, travis build will fail and rollback will be executed
    #   - "./performance-tests || (./rollbackService.sh;travis_terminate 1);"
    #   - "./security-tests || (./rollbackService.sh;travis_terminate 1);"
    #   - "./sit || (./rollbackService.sh;travis_terminate 1);"

  - stage: deploy-prod
    name: "Deploy to PROD"
    if: type != pull_request AND branch = master
    install:
      - pip show awscli || pip install --user awscli # install aws cli w/o sudo only if necessary
      - export AWSCLI_PATH=$(pip show awscli | grep Location | awk -F " " '{print $2}')
      - export PATH=$PATH:$AWSCLI_PATH
    before_script:
      - export VERSION=`mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec`
    script:
      # TODO: create copy-image.sh script
      # - ./copy-image.sh $REGISTRY_DEV_URL $REGISTRY_PROD_URL $VERSION-RC # We use the image created during stg deployment ("RC") and copy it to production registry
      - ./mvnw package -Pprod -DskipTests
      - docker build -t $IMAGE_NAME:$COMMIT .
    before_deploy:
      - curl https://raw.githubusercontent.com/AttestationLegale/ecs-deploy/master/service-deploy.sh > service-deploy.sh
      - chmod +x service-deploy.sh
      - curl https://raw.githubusercontent.com/AttestationLegale/ecs-deploy/master/ecs-deploy > ecs-deploy
      - chmod +x ecs-deploy
    deploy:
      # Deploying to PROD first
      - provider: script
        skip_cleanup: true
        script: ./service-deploy.sh $VERSION $REGISTRY_PROD_URL $SERVICE_PROD $CLUSTER_PROD $AWS_ECS_PROD_DEPLOYER_ACCESS_KEY_ID $AWS_ECS_PROD_DEPLOYER_SECRET_ACCESS_KEY
        on:
          branch: master
          condition: type != pull_request

  # Deploying to DEMO, after PROD docker image is created and pushed
  - stage: deploy-demo
    name: "Deploy to DEMO"
    if: type != pull_request AND branch = master
    install:
      - pip show awscli || pip install --user awscli # install aws cli w/o sudo only if necessary
      - export AWSCLI_PATH=$(pip show awscli | grep Location | awk -F " " '{print $2}')
      - export PATH=$PATH:$AWSCLI_PATH
      - export AWS_ACCESS_KEY_ID=$AWS_ECS_DEV_DEPLOYER_ACCESS_KEY_ID
      - export AWS_SECRET_ACCESS_KEY=$AWS_ECS_DEV_DEPLOYER_SECRET_ACCESS_KEY
    script: true
    before_deploy:
      - curl https://raw.githubusercontent.com/AttestationLegale/ecs-deploy/master/ecs-deploy > ecs-deploy
      - chmod +x ecs-deploy
    deploy:
      - provider: script
        skip_cleanup: true
        script: ./ecs-deploy -n $SERVICE_DEMO -c $CLUSTER_DEMO -i $REGISTRY_PROD_URL:latest -r $AWS_REGION -k $AWS_ACCESS_KEY_ID -s $AWS_SECRET_ACCESS_KEY --force-new-deployment
        on:
          branch: master
          condition: type != pull_request

## Git-crypt initialisation. To be used only when git-crypt is set for the repository
# before_install:
#   - echo "$GPG_CRYPT_KEY" | base64 -d >  .git-crypt/tmp/git-crypt.key
#   - gpg --import .git-crypt/tmp/git-crypt.key
#   - git-crypt unlock

notifications:
  webhooks:
    on_success: change  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: false     # default: false
